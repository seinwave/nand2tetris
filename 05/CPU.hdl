// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=ni);  // Sel, determines A or C instruction
    Mux16(a=outtM,b=instruction,sel=ni,out=i); // Routes either instructions, or ALU output, to A register

    Or(a=ni,b=instruction[5],out=intoA);  // Load, determines whether input is written to register (instruction[5] being the first of the destination bits)
    ARegister(in=i,load=intoA,out=A,out[0..14]=addressM); // Writes possible changes to register

    And(a=instruction[15],b=instruction[12],out=AorM); // Sel - if 1, we have a C instruction; if 0, we have an A;
    Mux16(a=A,b=inM,sel=AorM,out=AM); // Passes inM or output of A register to the ALU

    ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],
    f=instruction[7],no=instruction[6],out=outtM,out=outM,zr=zr,ng=ng);  // if AM = inM, perform some mathematical function;

    And(a=instruction[15],b=instruction[4],out=intoD); // Load, must be an A instruction with an 1 d-instruction bit to 'activate'
    DRegister(in=outtM,load=intoD,out=D);

    And(a=instruction[15],b=instruction[3],out=writeM); // writeM's standalone control bit -- must be an A instruction with a 1 d-instruction bit

    Not(in=ng,out=pos);
    Not(in=zr,out=nzr);
    And(a=instruction[15],b=instruction[0],out=jgt);  // setting right-most jump bit
    And(a=pos,b=nzr,out=posnzr);
    And(a=jgt,b=posnzr,out=ld1);

    And(a=instruction[15],b=instruction[1],out=jeq);  // setting middle jump bit
    And(a=jeq,b=zr,out=ld2);

    And(a=instruction[15],b=instruction[2],out=jlt); // setting left-most jump bit
    And(a=jlt,b=ng,out=ld3);

    Or(a=ld1,b=ld2,out=ldt);
    Or(a=ld3,b=ldt,out=ld); // detemines load bit of PC

    PC(in=A,load=ld,inc=true,reset=reset,out[0..14]=pc);
}